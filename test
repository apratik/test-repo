
import {
  wrap,
  withErrorHandler,
  withCache,
  withTimer,
} from "../common/utils.js";
import createHybridFS from "../common/hybrid-fs.js"; 
import config from "../config.js";
import logger from "../common/logger.js";
import knex from "knex";

const dbOpts = {
  reconnect_flag: true,
  db: null,
};

setInterval(function() {
  // Download new S3 file
  // Assuming the download process sets reconnect_flag to true upon success
  dbOpts['reconnect_flag'] = true;
}, 1000);

function getDb() {
  if (dbOpts['reconnect_flag']) {
    const db = knex({
      // Configure Knex options here
    });
    dbOpts['reconnect_flag'] = false;
    dbOpts['db'] = db;
    return dbOpts['db'];
  }
  return dbOpts['db'];
}

const binEndpoint = config.resolveEndpoint("client.bin", ["file:", "s3:"]);
const localpath = config.get("localpath");
const fetchInterval = config.get("fetchinterval");
const path = '/db/payments.db';
const hfs = createHybridFS(binEndpoint);

async function fetchBin(prefix) {
  const rows = await getDb()
    .column({
      binLength: "binCharacterLengthCount",
      brandCode: "paymentBrandCode",
      brandCardTypeCode: "paymentBrandCardTypeCode",
      cardProgramIdentificationCode: "brandedCardProgramIdentificationCode",
      onlineGamblXbrdr: "onlineGamblXbrdr",
      rangeBin: "rangeBin"
    })
    .select()
    .from("bin-manager")
    .where("rangeBin", prefix)
    .limit(1);
  const transformed = _.map(rows, (row) => {
    const onlineGamblXbrdr = row.onlineGamblXbrdr === "N" ? false : true;
    return {
      ...row,
      onlineGamblXbrdr,
    };
  });
  return _.first(transformed);
}

async function refreshData(binEndpoint, localpath) {
  if (!fs.existsSync(localpath)) {
    fs.mkdirSync(localpath, { recursive: true });
  }
  const fullPath = `${binEndpoint.prefix}${path}`;
  try {
    const objectData = await hfs.getObject(fullPath);
    const fileStream = fs.createWriteStream(`${localpath}/payments.db`);
    objectData.pipe(fileStream);
    objectData.on('end', () => {
      logger.info('Object downloaded successfully.');
    });
  } catch (error) {
    logger.error('Error downloading object:', error);
  }
}

refreshData(binEndpoint, localpath);

setInterval(async () => {
  logger.info("Inside scheduled pull");
  await refreshData(binEndpoint, localpath);
}, fetchInterval);

export const getBin = wrap(
  fetchBin,
  withErrorHandler(logger),
  withTimer("getBin"),
  withCache
);
